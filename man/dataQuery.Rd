% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataQuery.R
\name{dataQuery}
\alias{dataQuery}
\title{dataQuery}
\usage{
dataQuery(xy = xy, obs.dates = obs.dates, env.data = env.data,
  env.dates = env.dates, time.buffer = NULL, spatial.buffer = NULL,
  smooth.fun = NULL)
}
\arguments{
\item{xy}{Object of class \emph{SpatialPoints} or \emph{SpatialPointsDataFrame}.}

\item{obs.dates}{Object of class \emph{Date} with \emph{xy} observation dates.}

\item{env.data}{Object of class \emph{RasterStack}, \emph{RasterBrick} or \emph{data.frame}.}

\item{env.dates}{Object of class \emph{Date} with \emph{env.data} observation dates.}

\item{time.buffer}{Two element vector with temporal search buffer (expressed in days).}

\item{spatial.buffer}{Spatial buffer size used to smooth the returned values. The unit depends on the spatial projection.}

\item{smooth.fun}{Smoothing function applied with \emph{spatial.buffer}.}
}
\value{
An object of class \emph{data.frame} with the selected values and their corresponding dates.
}
\description{
Query environmental data for coordinate pairs using the nearest non NA value in time.
}
\details{
{Returns environmental variables from a raster object for a given set of x and y coordinates depending on the
temporal distance between the sample observation date (\emph{obs.dates}) and the date on which the environmental data was
collected (\emph{env.dates}). Within the buffer specified by \emph{time.buffer}, the function will search for the nearest
non \emph{NA} value with the shortest temporal distance. The user can adjust \emph{time.buffer} to control which pixels
are considred in this analysis. For example, \emph{time.buffer} can be set to c(30,0) prompting the function to ignore
environmental information acquired after the sample observation date and limit the search to -30 days. If \emph{time.buffer}
is set to null all acquisitions are considered. The user may also provide \emph{spatial.buffer} to spatially smooth the selected
environmental information. In this case, for each sample, the function will consider the neighboring pixels within the selected
acquisition and aplly a smoothing function defined by \emph{smooth.fun}. If \emph{smooth.fun} is not specified, a weighted mean
will be returned by default. If \emph{env.data} is a \emph{data.frame} \emph{spatial.buffer} and \emph{smooth.fun} are ignored and
\emph{env.dates} should refer to each column.}
}
\examples{
{

 require(raster)

 # read raster data
 file <- list.files(system.file('extdata', '', package="rsMove"), 'tc.*tif', full.names=TRUE)
 rsStk <- stack(file)
 rsStk <- stack(rsStk, rsStk, rsStk) # dummy files for the example

 # read movement data
 moveData <- read.csv(system.file('extdata', 'konstanz_20130805-20130811.csv', package="rsMove"))
 moveData <- SpatialPointsDataFrame(moveData[1:10,1:2], moveData[1:10,], proj4string=crs(rsStk))

 # raster dates
 env.dates <- seq.Date(as.Date("2013-08-01"), as.Date("2013-08-09"), 1)

 # sample dates
 obs.dates <- as.Date(moveData@data$date)

 # retrieve remote sensing data for samples
 rsQuery <- dataQuery(xy=moveData, obs.dates=obs.dates,
 env.data=rsStk, env.dates=env.dates, time.buffer=c(30,30))

}

}
\seealso{
\code{\link{sampleMove}} \code{\link{backSample}}
}
